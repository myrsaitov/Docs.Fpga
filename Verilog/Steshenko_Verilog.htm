<html lang="RU">
<head>

<link rel=stylesheet href="http://www.gaw.ru/tutor.css" type="text/css">

<title>Школа схемотехнического проектирования устройств обработки сигналов</title>

<meta name="description" content="Справочные данные по электронным компонентам">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta NAME="Author" CONTENT="Гаврилюк Сергей">
<meta name="Keywords" lang="RU" content="микроэлектроника, микросхема, транзистор, диод, микроконтроллер, память">
<meta html.cgi="Template  www.gaw.ru">
</head>


<html>
<head>
<title><_title_></title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<link rel="stylesheet" href="/style.css">
</head>
<body bgcolor=#647786 text="#4C5A66" link="#4C5A66" vlink="#4C5A66" alink="#4C5A66" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="780" border="0" cellspacing="0" cellpadding="0" align="center">
  <tr> 
    <td width="2" bgcolor="#4C5A66"><img src="/images/spacer.gif" width="2" height="2"></td>
    <td width="768"> 
      <table border=0 cellpadding=0 cellspacing=0 width="768" align="center">
        <tr> 
          <td width=768 height=76> 
            <table width="768" border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td width="174"><img src="/images/header1.gif" width="172" height="75"></td>
                <td width="202"><img src="/images/header2.gif" width="372" height="75"></td>
                <td width="234"><img src="/images/header3.gif" width="232" height="75"></td>
              </tr>
            </table>
          </td>
        </tr>
        <tr> 
          <td width=768> 
            <table width="776" border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td width="140" bgcolor="#9C4B4B"> 
                  <p class="data" align="left">19.10.2000</p>
                </td>
                <td bgcolor="#9C4B4B" width="634"> 
                  <div align="right"><img src="/images/online.gif" width="141" height="18"></div>
                </td>
              </tr>
            </table>
          </td>
        </tr>
        <tr> 
          <td width=768> 
            <table width="768" border="0" cellspacing="0" cellpadding="0" bgcolor="#4C5A66">
              <tr> 
                <td width="140" bgcolor="#C9CDD1" valign="top"> 
                  <table width="100%" border="0" cellspacing="5" cellpadding="0">
                    <tr> 
                      <td>
<table border=0 cellspacing=0 cellpadding=0 align="center">
  <tr>
    <td>
<p><b>Разделы:</b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
</p>
<p><img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/">Главная</a></b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/html.cgi/about/index.htm">О журнале</b></a><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b>Тема номера</b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/html.cgi/arhiv/index.htm">Архив</a></b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/html.cgi/rubrikator/index.htm">Рубрикатор</a></b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="http://gaws.al.ru/forum/conf.phtml?id=2533&part=13431" target="_blank">Форум</a></b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><a href="http://www.centre.ru/advert.htm" target="_blank"><b>Реклама</b></a><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><a href="http://www.compitech.ru/html.cgi/about/shop.htm"><b>Где купить</b></a>
<br><img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><a href="#" onclick="javascript: window.open('/reg.html','','toolbar=0,location=0,directories=0,menuBar=0,scrollbars=1,resizable=0,width=500,height=350,left=150,top=150');"><b>Подписка</b></a><br>
<!-- <img src="/images/vline.gif" width="130" height="4"></p> 
<p><b>Журнал<br>Схемотехника:</b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
</p>
<p><img src="/images/dot1.gif" width="9" height="9" hspace="3"><b>О журнале</b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/html.cgi/arhiv_s/index.htm">Архив</a></b><br> -->
<img src="/images/vline.gif" width="130" height="4"><br>
</td>
  </tr>
</table>
                      </td>
                    </tr>
                    <tr> 
                      <td valign="top"> <p>&nbsp;</p>
                        <p> <b>  Поиск:</b><br>
						<img src="/images/vline.gif" width="130" height="4"><br><br>
                             <form method ="get" action="http://www.compitech.ru/html.cgi/look.cgi">  
                             <INPUT NAME="for" size=12>
			     <input type="Hidden" name="seck" value="html">
                             <input type="image" border="0" src="/images/ok.gif" width="19" height="11">
                             </form> 
                             <a href="http://www.compitech.ru/html.cgi/look_ext.cgi"> расширенный поиск </a>
                            <img src="/images/vline.gif" width="130" height="4"> 

                          </p>
<form action="http://sub.chipdoc.ru/addsub.php" method="post" name="addsub">
<input type="hidden" name="fid" value="5">
<input type="hidden" name="list" value="11">
Подпишись на новости<br>
<strong>Редакции</strong><br><br>

<table align="center" cellspacing="0" cellpadding="0" border="0">
<tr>
    <td><p class="sub">Имя</td>
    <td><input type="text" name="uname" size=11 maxlength=50 class="win"></td>
</tr>
<tr>
    <td><p class="sub">E-mail</td>
    <td><input type="text" name="umail" size=11 maxlength=50 class="win"></td>
</tr>
<tr>
    <td colspan="2" align="center"><input type="submit" value="Подписаться" class="button">
</form>
	</td>
</table>
<div align="center">
<!-- HotLog -->
<script language="javascript">
hotlog_js="1.0";hotlog_d=document; hotlog_n=navigator;hotlog_rn=Math.random();
hotlog_n_n=(hotlog_n.appName.substring(0,3)=="Mic")?0:1;
hotlog_r=""+hotlog_rn+"&s=27770&im=103&r="+escape(hotlog_d.referrer)+"&pg="+
escape(window.location.href);
hotlog_d.cookie="hotlog=1"; hotlog_r+="&c="+(hotlog_d.cookie?"Y":"N");
hotlog_d.cookie="hotlog=1; expires=Thu, 01-Jan-70 00:00:01 GMT"</script>
<script language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")</script>
<script language="javascript1.2">
hotlog_js="1.2";hotlog_s=screen;
hotlog_r+="&wh="+hotlog_s.width+'x'+hotlog_s.height+"&px="+((hotlog_n_n==0)?
hotlog_s.colorDepth:hotlog_s.pixelDepth)</script>
<script language="javascript1.3">hotlog_js="1.3"</script>
<script language="javascript">hotlog_r+="&js="+hotlog_js;
hotlog_d.write("<a href=http://click.hotlog.ru/?27770 target=_top><img "+
"src=\"http://hit3.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&\" border=0 width=88 height=31 alt=HotLog></a>")</script>
<noscript><a href=http://click.hotlog.ru/?27770 target=_top><img
src="http://hit3.hotlog.ru/cgi-bin/hotlog/count?s=27770&im=103" border=0
width="88" height="31" alt="HotLog"></a></noscript>
<!-- /HotLog -->
</div>
<br>
<!-- HotLog -->
<script language="javascript">
hotlog_js="1.0";hotlog_d=document; hotlog_n=navigator;hotlog_rn=Math.random();
hotlog_n_n=(hotlog_n.appName.substring(0,3)=="Mic")?0:1;
hotlog_r=""+hotlog_rn+"&s=25830&r="+escape(hotlog_d.referrer)+"&pg="+
escape(window.location.href);
hotlog_d.cookie="hotlog=1"; hotlog_r+="&c="+(hotlog_d.cookie?"Y":"N");
hotlog_d.cookie="hotlog=1; expires=Thu, 01-Jan-70 00:00:01 GMT"</script>
<script language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")</script>
<script language="javascript1.2">
hotlog_js="1.2";hotlog_s=screen;
hotlog_r+="&wh="+hotlog_s.width+'x'+hotlog_s.height+"&px="+((hotlog_n_n==0)?
hotlog_s.colorDepth:hotlog_s.pixelDepth)</script>
<script language="javascript1.3">hotlog_js="1.3"</script>
<script language="javascript">hotlog_r+="&js="+hotlog_js;
hotlog_d.write("<img src=\"http://hit2.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&\" border=0 width=1 height=1>")</script>
<noscript><img src="http://hit2.hotlog.ru/cgi-bin/hotlog/count?s=25830" border=0
width=1 height=1></noscript>
<!-- /HotLog -->

                      </td>
                    </tr>
                  </table>
                </td>
                <td width="2"><img src="/images/spacer1.gif" width="2" height="18"></td>
                <td bgcolor="#FFFFFF"  valign="top" width="634"> 
                  <table width="100%" border="0" cellspacing="0" cellpadding="0">
                    <tr> 
                      <td><img src="/images/spacer1.gif" width="634" height="2"></td>
                    </tr>
                    <tr> 
                      <td align="center">						
<!--BEGIN  compitech ALL TYPES (IE)-->
<noscript><iframe src="http://a.lvt.ru/f21025x1" frameborder="0" vspace="0" hspace="0" width="468" height="60" marginwidth="0" marginheight="0" scrolling="no"><a href="http://a.lvt.ru/r21025x1x-1039611802" target="_blank"><img src="http://a.lvt.ru/b21025x1x-1039611802" border="0" width="468" height="60"></a></iframe></noscript><script>var rand = Math.floor(Math.random() * 1000000000);document.write('<iframe src="http://a.lvt.ru/f21025x1_' + rand + '" frameborder="0" vspace="0" hspace="0" width="468" height="60" marginwidth="0" marginheight="0" scrolling="no">');document.write('<a href="http://a.lvt.ru/r21025x1x' + rand + '" target="_blank"><img src="http://a.lvt.ru/b21025x1x' + rand + '" border="0" width="468" height="60"></a>');document.write('</iframe>');</script>
<!--END -->
                      </td>
                    </tr>
                    <tr> 
                      <td><img src="/images/spacer1.gif" width="634" height="2"></td>
                    </tr>
                  </table>
                  <table width="100%" border="0" cellspacing="5" cellpadding="0">
                    <tr> 
                      <td> 
 <table width="624" cellspacing="0" cellpadding="0" border="0" align="center">
<tr><td>
<p align="left"><b>Владимир Стешенко, к.т.н.</b></p>

<h1 class="titl">Школа схемотехнического 
проектирования устройств обработки сигналов</h1>
<h3 align="center">Занятие 12. Языки описания аппаратуры. Язык описания аппаратуры Verilog HDL</h3>

<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;<b>От редакции: В одном из последних номеров журнала мы закончили публикацию статьи С. Емца «Verilog — инструмент разработки цифровых систем» [1], в которой рассмотрены особенности использования языка описания аппаратуры Verilog применительно к моделированию и тестированию ASIC. В этом и следующих занятиях школы мы рассмотрим использование языка Verilog для описания FPGA, приведем примеры построения комбинационных и последовательностных устройств. В качестве иллюстрации построения синтезируемых описаний на Verilog см. статью В. Б. Стешенко «Примеры проектирования цифровых устройств с использованием языков описания аппаратуры», публикация которой начата в журнале «Схемотехника», № 7/2001.</b>

<h3 align="center">Общие сведения</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Как известно [1–4], язык описания аппаратуры Verilog был разработан фирмой Gateway Design Automation в 1984 г. После поглощения последней компанией Caddence язык начал получать все более широкое распространение среди разработчиков и стал не менее популярен, чем VHDL.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В отличие от VHDL, структура и синтаксис которого напоминают такие «сложные» языки, как АДА или АЛГОЛ, синтаксис Verilog напоминает очень популярный в среде как программистов, так и разработчиков встроенных систем и систем ЦОС старый добрый С. Verilog позволяет достаточно эффективно выполнить описание и провести моделирование (simulate) и синтез цифровых схем благодаря применению встроенных примитивов (built-in primitives) и примитивов пользователя (user-defined primitives), средствам временного контроля (timing checks), моделирования задержки распространения от входа до выхода (pin-to-pin delay simulation), возможности задания внешних тестовых сигналов (external stimulus).
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Как и VHDL, Verilog изначально предназначался для моделирования цифровых систем и как средство описания синтезируемых проектов стал использоваться с 1987 г. В настоящее время ведущие пакеты синтеза систем на ПЛИС, такие как продукты фирм Synopsis, Caddence, Mentor Graphics, многих производителей ПЛИС, поддерживают синтез с описания на языке Verilog.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В языке Verilog поддерживается набор типов логических вентилей (Gate Types). Для логических вентилей определены ключевые слова (Keywords): and (И), nand (И-НЕ), or (ИЛИ), nor (ИЛИ-НЕ), xor (Исключающее ИЛИ), xnor (Исключающее ИЛИ-НЕ), buf (Буферный элемент), not (Отрицание НЕ).
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В Verilog при использовании вентилей необходимо задать входы и выходы элемента, а также (не обязательно) имя вентиля. Например, вентили and и or должны иметь один выход и два и более входов. Так, для вентиля И имеем:
<blockquote>and &lt;name&gt;&lt;list of arguments&gt;<br>
and myand(out, in1, in2, in3);<br>
and (out, in1, in2<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Вентили buf и not могут иметь один вход и один и более выходов. Имя вентиля является необязательным. Примеры использования приведены ниже:
<blockquote>buf mybuf(out1, out2, out3, in);<br>
not (out, in);<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Говоря о синтаксисе языка Verilog, следует помнить, что он является контекстно-зависимым языком, то есть строчные и прописные буквы различаются. Все ключевые слова задаются в нижнем регистре (строчные буквы).
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Для обозначения пустого пространства (White Space) используются символы пробела, табуляции и новой строки.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В Verilog поддерживаются два типа комментариев. Они аналогичны принятым в С++ — если нужно закомментировать одну строку, то используются две косые черты в ее начале:
<blockquote>// это комментарий</blockquote>
Чтобы закомментировать несколько строк, используется следующая конструкция:
<blockquote>/* Это<br>
комментарии... */</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Очевидно, что комментарии не могут быть вложенными.
<h3 align="center">Операторы</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В Verilog существуют три типа операторов — с одним, двумя и тремя операндами. Унарные операторы располагаются слева от операнда, бинарные — между операндами и тернарный оператор разделяет три операнда двумя операторами.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;<i><b>Примеры операторов:</b></i>
<blockquote>clock = ~clock; // унарный оператор отрицания<br>
&nbsp;&nbsp;// clock — операнд<br>
c = a || b; // || — бинарный оператор ИЛИ, a и b операнды<br>
r = s? t: u; //?: — тернарный оператор<br>
&nbsp;&nbsp;// r = [если s истинно то t иначе u]</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Как правило, при написании описаний на Verilog комментарии одной строкой (//) используются для ввода текстовых комментариев к коду, а конструкцию /* */ используют при отладке для «закомментирования» фрагментов кода.
<h3 align="center">Числа в Verilog</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;<b><i>Целые числа (Integers)</i></b>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Целые числа могут быть двоичными (binary), обозначаются b или B, десятичными (decimal, d или D), шестнадцатеричными (hexidecimal, h, H) или восьмеричными (octal, o или O). Для определения чисел используются следующие форматы:
<ol><li><разрядность>'<основание><число> — полное описание числа;</li>
<li><основание><число> — используется разрядность представления, заданная в системе по определению, но не менее 32 бит;</li>
<li><число> — используется, когда основание по умолчанию десятичное.</li></ol>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Разрядность определяет число бит под представление числа. Например:
<blockquote>8'b10100010 // 8-битное число в двоичной системе<br>
8'hA2 // 8-битное число в шестнадцатеричной системе</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;<b><i>Неопределенное и высокоимпедансное 
состояния (X and Z values)</i></b>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Символ x используется для задания неопределенного состояния, символ z показывает третье (высокоимпедансное). При использовании в качестве цифры в числах вместо символа z можно использовать «?». Это рекомендуется делать в операторах выбора (case expressions) для улучшения читаемости кода. Ниже приведены примеры использования символов x и z в числах.
<blockquote>4'b10x0<br>
4'b101z<br>
12'dz<br>
12'd?<br>
8'h4x<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;<b><i>Отрицательные числа (Negative numbers)</i></b>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Отрицательное число задается с помощью знака минус перед разрядностью числа. Примеры отрицательных чисел:
<blockquote>-8'd5<br>
8'b-5 // неправильно, знак минус перед числом, а не разрядностью!</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;<b><i>Подчеркивание (Underscore)</i></b>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Знак подчеркивания (_, underscores) может быть записан в любом месте числа, что позволяет использовать его как разделитель разрядов, улучшающий читабельность.
<blockquote>16'b0001_1010_1000_1111 // использование подчеркивания<br>
8'b_0001_1010 // некорректное использование подчеркивания</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;<b><i>Действительные числа (Real)</i></b>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Действительные числа (Real numbers) могут быть представлены либо в десятичном виде, либо в стандартной форме с плавающей точкой (scientific format). Ниже приведены примеры действительных чисел:
<blockquote>1.8<br>
3_2387.3398_3047<br>
3.8e10 // e или E для обозначения порядка<br>
2.1e-9<br>
3. // неправильно!<br></blockquote>


<h3 align="center">Строки (Strings)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Строка заключается в кавычки и не может занимать более одной линии. Примеры использования строк:
<blockquote>«hello world»; // правильное использование строк<br>
«good<br>
b<br>
y<br>
e<br>
wo<br>
rld»; // неправильное использование строк</blockquote>


<h3 align="center">Цепи в Verilog (Nets)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Для обозначения цепей используются следующие ключевые слова: wire, supply0, supply1. Величина по умолчанию (default value) — z. Разрядность по умолчанию (default size) — 1 бит.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;По своему назначению цепь (Net) в Verilog сходна с сигналом в VHDL. Цепи обеспечивают непрерывное модифицирование сигналов на выходах цифровой схемы относительно изменения сигналов на ее входах.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Если драйвер (источник) сигнала цепи имеет некоторое значение, то и цепь принимает то же значение. Если драйверы цепи принимают различные значения, цепь принимает значение наиболее «сильного» сигнала (strongest), если же «сила» каждого сигнала равнозначна, то цепь принимает неопределенное состояние (x).
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Для обозначения цепи наиболее часто применяется ключевое слово wire, ключевые слова supply0 и supply1 используются для моделирования источников питания (power supplies) в схеме.
<h3 align="center">Регистры (Registers)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Для обозначения регистров применяется ключевое слово reg. Величина по умолчанию — х. Разрядность по умолчанию — 1 бит.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Основное различие между цепями (nets) и регистрами (registers) состоит в том, что значение регистра должно быть назначено явно. Эта величина сохраняется до тех пор, пока не сделано новое назначение. Рассмотрим использование этого свойства на примере триггера с разрешением (E-type flip flop):
<blockquote>module E_ff(q, data, enable, reset, clock);<br>
output q;<br>
input data, enable, reset, clock;<br>
reg q;<br><br>

always @(posedge clock)<br>
if (reset == 0)<br>
q = 1'b0;<br>
else if (enable==1)<br>
q = data;<br>
endmodule<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Регистр q хранит записанную в него величину до тех пор, пока не произойдет новое назначение сигнала.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Для того чтобы провести моделирование этого примера, напишем модуль верхнего уровня (higher level module), который формирует тестовый сигнал и позволяет провести наблюдение за выходами триггера. В этом случае сигнал q является цепью, драйвером которой служит модуль E_ff.
<blockquote>module stimulus;<br>
reg data, enable, clock, reset;<br>
wire q;<br>
initial begin<br>
clock = 1'b0;<br>
forever #5 clock = ~clock;<br>
end<br><br>
E_ff eff0(q, data, enable, reset, clock);<br><br>
initial begin<br>
reset = 1'b0;<br>
#10 reset = 1'b1;<br>
data = 1'b1;<br>
#20 enable = 1;<br>
#10 data = 1'b0;<br>
#10 data = 1'b1;<br>
#10 enable = 0;<br>
#10 data = 1'b0;<br>
#10 data = 1'b1;<br>
#10 enable = 1;<br>
#10 reset = 1'b0;<br>
#30 $finish;<br>
end<br><br>
initial<br>
$monitor($time, « q = %d», q);<br><br>
endmodule<br></blockquote>


<h3 align="center">Векторы (Vectors)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Как цепи, так и регистры могут иметь произвольную разрядность, если объявлять их как векторы. Ниже приведены примеры объявлений векторов:
<blockquote>reg [3:0] output; // выход 4-разрядного регистра<br>
wire [31:0] data; // 32-битная цепь<br>
reg [7:0] a;<br><br>
data[3:0] = output; // частичное назначение<br>
output = 4'b0101; // Назначение на целый регистр<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Очень важным является порядок назначения элементов в векторе. Первый элемент регистра является наиболее значимым (most significant):
<blockquote>reg [3:0] a; // а3 — старший бит<br>
reg [0:3] b; // b0 — старший бит.</blockquote>


<h3 align="center">Массивы (Arrays)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Регистры (Registers), целые числа (integers) и временные (time) типы данных можно объявлять как массивы, как это показано в нижеследующем примере:
<blockquote>Объявление<br>
&lt;data_type_spec&gt; {size} &lt;variable_name&gt; {array_size}<br><br>
Использование<br>
&lt;variable_name&gt; {array_reference} {bit_reference}<br><br>
reg data [7:0]; // 8 1-разрядных элементов<br><br>
integer [3:0] out [31:0]; // 32 4-битных элемента<br><br>
data[5]; // 5 8-битных элементов</blockquote>


<h3 align="center">Регистровые файлы (Memories)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Регистровый файл представляет собой массив регистров (array of registers). Ниже представлен синтаксис объявления регистрового файла.
<blockquote>reg [15:0] mem16_1024 [1023:0]; // регистровый файл 1K Х 16<br>
mem16_1024[489]; // 489 элемент файла mem16_1024</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Для обозначения регистровых файлов желательно использовать информативные имена, например mem16_1024, чтобы избежать путаницы.


<h3 align="center">Элементы с третьим 
состоянием (Tri-state)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Как уже упоминалось, ситуация, когда драйверов одной цепи больше одного, в языке Verilog разрешается в пользу источника, имеющего большую «силу» (signal «strengths»). Наименьшую «силу» имеет сигнал z, обозначающий третье или высокоимпедансное (high-impedance) состояние. Правда, эти рассуждения актуальны именно на этапе моделирования, но никак не синтеза ПЛИС, о них следует помнить при разработке тестов. Таким образом, драйвер в третьем состоянии не влияет на итоговое значение сигнала цепи. Пример драйвера с третьим состоянием приведен ниже.
<blockquote>module triDriver(bus, drive, value);<br>
inout [3:0] bus;<br>
input drive;<br>
input [3:0] value;<br><br>
assign #2 bus = (drive == 1)? value: 4'bz;<br><br>
endmodule // triDriver</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В данном примере, когда управляющий сигнал принимает высокий уровень, шина принимает значение входной величины, в противном случае она переходит в третье состояние.


<h3 align="center">Арифметические операторы (Arithmetic operators)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Бинарные операторы умножения, деления, сложения, вычитания, определения остатка от деления представлены в следующем примере.
<blockquote>module arithTest;<br>
reg [3:0] a, b;<br><br>
initial begin<br>
a = 4'b1100; // 12<br>
b = 4'b0011; // 3<br><br>
$displayb(a * b); // умножение — 4'b1000<br>
// 4 МСБ<br>
$display(a / b); // деление 4<br>
$display(a + b); // сложение 15<br>
$display(a — b); // вычитание 9<br>
$display((a + 1'b1) % b); // остаток 1<br><br>
end<br><br>
endmodule // arithTest</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Унарные плюс и минус имеют более высокий приоритет (precedance), чем бинарные операторы.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Следует заметить, что если хотя бы один бит в одном из операндов неопределен (равен x), то и результат операции также будет неопределен.
Логические операторы (Logical Operators)
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;К логическим операциям относятся И (and), ИЛИ (or) и НЕ (not). Результат логической операции может принимать значения истинно, то есть true (1), или ложно, то есть false (0), а также иметь неопределенное состояние — unknown (x). При выполнении логического оператора все неопределенные величины, как и операнды в третьем состоянии, принимаются как имеющие низкий логический уровень (false). В качестве операнда может выступать как переменная (variable), так и логическое выражение (expression). Пример работы логических операторов приведен ниже.
<blockquote>module logicalTest;<br><br>
reg [3:0] a, b, c;<br><br>
initial begin<br>
a = 2; b = 0; c = 4'hx;<br><br>
$display(a && b); // оператор И результат 0<br>
$display(a || b); // оператор ИЛИ результат 1<br>
$display(!a); // оператор НЕ результат 0<br>
$display(a || c); // 1, unknown || 1 (=1)<br>
$display(!c); // unknown<br>
end<br><br>
endmodule // logicalTest<br></blockquote>


<h3 align="center">Операторы отношения 
(Relational Operators)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;К операторам отношения относятся операторы «больше», «меньше», «больше или равно», «меньше или равно». Результат операции — истина или ложь. Если хотя бы один операнд неопределен, то и результат операции будет неопределен.
<blockquote>module relatTest;<br>
reg [3:0] a, b,c, d;<br><br>
initial begin<br>
a=2;<br>
b=5;<br>
c=2;<br>
d=4'hx;<br><br>
$display(a &lt; b); // true, 1<br>
$display(a &gt; b); false, 0<br>
$display(a &gt;= c); // true, 1<br>
$display(d &lt;= a); unknown<br>
end<br>
endmodule // relatTest<br></blockquote>



<h3 align="center">Операторы эквивалентности (Equality)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;К операторам эквивалентности (equality operators) относятся операторы логического равенства (logical equality), логического неравенства (logical inequality), выборочного равенства (case equality) и неравенства (inequality). Эти операторы сравнивают операнды побитно. Логические операторы возвращают неопределенный результат, если операнд содержит неопределенные биты, в отличие от выборочных операторов. В случае неравной длины операндов более короткий операнд дополняется нулями.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Ниже приведен пример использования операторов эквивалентности.
<blockquote>module equTest;<br>
reg [3:0] a, b,c, d, e, f;<br><br>
initial begin<br>
a = 4; b = 7;<br>
c = 4'b010;<br>
d = 4'bx10;<br>
e = 4'bx101;<br>
f = 4'bxx01;<br><br>
$displayb(c); // результат 0010<br>
$displayb(d); // результат xx10<br><br>
$display(a == b); // logical equality, результат 0<br>
$display(c!= d); // logical inequality, результат x<br>
$display(c!= f); // logical inequality, результат 1<br>
$display(d === e); // case equality, результат 0<br>
$display(c!== d); // case inequality, результат 1<br>
end<br>
endmodule // equTest<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Операторы эквивалентности и присваивания — это совершенно различные операторы.


<h3 align="center">Поразрядные операторы 
(Bitwise Operators)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;К поразрядным операторам относятся поразрядное отрицание, поразрядные логические И, ИЛИ, исключающее ИЛИ, исключающее ИЛИ-НЕ. Поразрядные операторы выполняются только над операндами, имею- щими одинаковую разрядность. В том случае, если разрядность одного операнда меньше другого, недостающие разряды дополняются нулями. Ниже приведен пример использования поразрядных операторов.
<blockquote>module bitTest;<br>
reg [3:0] a, b,c;<br><br>
initial begin<br>
a = 4'b1100; b = 4'b0011; c = 4'b0101;<br>
$displayb(~a); // поразрядное отрицание, результат 4'b0011<br>
$displayb(a & c); // поразрядное И, результат 4'b0100<br>
$displayb(a | b); // поразрядное ИЛИ, результат 4'b1111<br>
$displayb(b ^ c); // поразрядное xor, результат 4'b0110<br>
$displayb(a ~^ c); // поразрядное xnor, результат 4'b0110<br>
end<br>
endmodule // bitTest<br></blockquote>

<h3 align="center">Операторы приведения 
(Reduction Operator)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;К операторам приведения относятся И, ИЛИ, И-НЕ, ИЛИ-НЕ, исключающее ИЛИ, исключающее ИЛИ-НЕ (два варианта). Они выполняются над многоразрядным операндом пошагово, бит за битом, начиная с двух крайних левых разрядов, выдавая на выходе одноразрядный результат. Очевидно, что такой подход позволяет реализовать проверку на четность (нечетность). Ниже приведены примеры использования операторов приведения.
<blockquote>module reductTest;<br>
reg [3:0] a, b,c;<br><br>
initial begin<br>
a = 4'b1111;<br>
b = 4'b0101;<br>
c = 4'b0011;<br><br>
$displayb(& a);//, (то же 1&1&1&1), равен 1 1<br>
$displayb(| b); // (то же 0|1|0|1), равен 1<br>
$displayb(^ b); // искл.ИЛИ (то же 0^1^0^1), результат 0<br>
end<br><br>
endmodule // reductTest<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Безусловно, следует улавливать различия между логическими операторами, поразрядными операторами и операторами приведения. Несмотря на схожесть символов этих операторов, число операндов в каждом случае различно.

<h3 align="center">Операторы сдвига (Shift Operator)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Операторы сдвига позволяют осуществить сдвиг операнда как вправо, так и влево. Ниже приведен пример их использования:
<blockquote>module shiftTest;<br>
reg [3:0] a;<br><br>
initial begin<br>
a = 4'b1010;<br><br>
$displayb(a &lt;&lt; 1); // сдвиг влево на 1, результат 4'b0100<br>
$displayb(a &gt;&gt; 2); // сдвиг вправо на 1, результат 4'b0010<br>
end<br><br>
endmodule // shiftTest<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Этот оператор часто применяют для реализации регистров сдвига, длинных алгоритмов перемножения и т. п.



<h3 align="center">Конкатенация 
(объединение, Concatenation)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Объединение позволяет увеличить разрядность (size) цепей (nets), регистров (registers) и т. д.
<blockquote>module concatTest;<br>
reg a;<br>
reg [1:0] b;<br>
reg [5:0] c;<br><br>
initial begin<br>
a = 1'b1;<br>
b = 2'b00;<br>
c = 6'b101001;<br><br>
$displayb({a, b}); // результат 3 разрядное число 3'b100<br>
$displayb({c[5:3], a}); // результат 4 разрядное число 4'b1011<br><br>
end<br><br>
endmodule // concatTest<br></blockquote>



<h3 align="center">Повторение (Replication)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Повторение (Replication) может быть использовано для многократного повторения объединения (concatenation), как показано в нижеследующем примере.
<blockquote>module replicTest;<br>
reg a;<br>
reg [1:0] b;<br>
reg [5:0] c;<br><br>
initial begin<br>
a = 1'b1;<br>
b = 2'b00;<br><br>
$displayb({4{a}}); // результат — 1111<br>
c = {4{a}};<br>
$displayb(c); // результат — 001111<br>
end<br><br>
endmodule // replicTest<br></blockquote>



<h3 align="center">Системные директивы (System Tasks)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Наверное, этот раздел не будет интересен тем, кто пишет только синтезируемые описания на Verilog. Однако поскольку язык является не только средством описания проекта, но и довольно мощным инструментом для поведенческого моделирования систем, то следует сказать несколько слов о встроенных директивах компилятора, позволяющих выполнить моделирование и провести анализ его результатов.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Директивы вывода результатов моделирования (Writing to Standard Output)
Наиболее часто применяется директива $display. Она может быть использована для вывода на экран строк, выражений или переменных. Ниже приведен пример использования директивы $display.
<blockquote>$display(«Hello world»);<br>
--- результат Hello world<br><br>
$display($time) // текущее время моделирования.<br><br>
counter = 4'b10;<br>
$display(« The count is %b», counter);<br>
--- результат The count is 0010<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Синтакс определения формата вывода фактически аналогичен синтаксису printf в языке программирования C. Ниже приведено его описание для директивы $display.
<h4 align="left">Таблица 1</h4>
<table cellspacing="0" cellpadding="3" border="1">
    <tr align="center">
      <td>Формат</td>
      <td>Описание</td>
    </tr>
    <tr align="center">
      <td>%d or %D</td>
      <td>Decimal</td>
    </tr>
    <tr align="center">
      <td>%b or %B</td>
      <td>Binary</td>
    </tr>
    <tr align="center">
      <td>%h or %H</td>
      <td>Hexadecimal</td>
    </tr>
    <tr align="center">
      <td>%o or %O</td>
      <td>Octal</td>
    </tr>
    <tr align="center">
      <td>%m or %M</td>
      <td>Hierarchical name</td>
    </tr>
    <tr align="center">
      <td>%t or %T</td>
      <td>Time format</td>
    </tr>
    <tr align="center">
      <td>%e or %E</td>
      <td>Real in scientific format</td>
    </tr>
    <tr align="center">
      <td>%f or %F</td>
      <td>Real in decimal formal</td>
    </tr>
    <tr align="center">
      <td height=24>%g or %G</td>
      <td height=24>Real in shorter of above two</td>
    </tr>
</table>

<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Для специальных символов используются следующие эскейп-последовательности (escape sequence), приведенные в табл. 2.
<h4 align="left">Таблица 2</h4>
<table cellspacing="0" cellpadding="3" border="1">
    <tr align="center">
      <td>\n</td>
      <td>Новая строка</td>
    </tr>
    <tr align="center">
      <td>\t</td>
      <td>Табуляция</td>
    </tr>
    <tr align="center">
      <td>\\</td>
      <td>\</td>
    </tr>
    <tr align="center">
      <td>\"</td>
      <td>"</td>
    </tr>
    <tr align="center">
      <td>%%</td>
      <td>%</td>
    </tr>
</table>

<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Директива $write идентична директиве $display, за исключением того, что она не осуществляет автоматический переход на новую строку в конце вывода информации
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Если спецификация вывода не определена, то по умолчанию используются форматы, приведенные в табл. 3.
<h4 align="left">Таблица 3</h4>
<table cellspacing="0" cellpadding="3" border="1">
    <tr align="center">
      <td>Директива</td>
      <td>Формат по умолчанию</td>
    </tr>
    <tr align="center">
      <td>$display</td>
      <td>decimal</td>
    </tr>
    <tr align="center">
      <td>$displayb</td>
      <td>binary</td>
    </tr>
    <tr align="center">
      <td>$displayh</td>
      <td>hexadecimal</td>
    </tr>
    <tr align="center">
      <td>$displayo</td>
      <td>octal</td>
    </tr>
    <tr align="center">
      <td>$write</td>
      <td>decimal</td>
    </tr>
    <tr align="center">
      <td>$writeb</td>
      <td>binary</td>
    </tr>
    <tr align="center">
      <td>$writeh</td>
      <td>hexadecimal</td>
    </tr>
    <tr align="center">
      <td>$writeo</td>
      <td>octal</td>
    </tr>
</table>

<h4 align="left">Контроль процесса моделирования
(Monitoring a Simulation)</h4>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Формат директивы $monitor практически аналогичен формату $display. Разница заключается в том, что выход формируется при любом изменении переменных, которое произойдет в определенное время. Наблюдение может быть включено или отключено с помощью директив $monitoron или $monitoroff соответственно. По умолчанию в начале моделирования наблюдение за его ходом включено.
<h4 align="left">Окончание моделирования (Ending a simulation)</h4>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Директива $finish завершает симуляцию и передает управление системе моделирования. Директива $stop приостанавливает моделирование и переводит систему с Verilog в интерактивный режим.


<h3 align="center">Проектирование комбинационных схем</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Рассмотрим проектирование комбинационных логических устройств на примере мультиплексора 4 в 1. При проектировании мультиплексора рассмотрим различные методы его построения.


<h3 align="center">Реализация на уровне логических вентилей (Gate Level Implementation)</h3>
Рассмотрим пример реализации нашего мультиплексора 4 в 1 на уровне логических вентилей.
<blockquote>module multiplexor4_1(out, in1, in2, in3, in4, cntrl1, cntrl2);<br><br>
output out;<br>
input in1, in2, in3, in4, cntrl1, cntrl2;<br>
wire notcntlr1, notcntrl2, w, x, y, z;<br><br>
not (notcntrl1, cntrl1);<br>
not (notcntrl2, cntrl2);<br><br>
and (w, in1, notcntrl1, notcntrl2);<br>
and (x, in2, notcntrl1, cntrl2);<br>
and (y, in3, cntrl1, notcntrl2);<br>
and (z, in4, cntrl1, cntrl2);<br><br>
or (out, w, x, y, z);<br>
endmodule<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Рассмотрим этот пример построчно.
<blockquote>module multiplexor4_1(out, in1, in2, in3, in4, cntrl1, cntrl2);</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Первая строка представляет собой описание модуля. Ключевое слово module используется вместе с именем модуля, по которому осуществляется ссылка на модуль. В скобках приведен список портов модуля (port list), причем вначале перечисляются выходы, затем входы. Каждая строка завершается точкой с запятой — это, как известно, характерно для многих языков высокого уровня.
<blockquote>output out;<br>
input in1, in2, in3, in4, cntrl1, cntrl2;</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Все порты в списке должны быть объявлены как входы (input), выходы (output) или двунаправленые выводы (inout). В этом случае они по умолчанию назначаются типом цепь (wire), если нет других указаний. Когда назначено имя цепи, система моделирования на базе Verilog ожидает неявное назначение выходного сигнала, оценивая его, чтобы осуществлять передачу этого сигнала к внешним модулям.
<blockquote>wire notcntrl1, notcntrl2, w, x, y, z;</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В данной строке определяются внутренние цепи, осуществляющие объединение узлов мультиплексора. Как видим, понятия цепи в Verilog и сигнала в VHDL очень схожи:
<blockquote>not (notcntrl1, cntrl1);<br>
not (notcntrl2, cntrl2);<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В этих строчках описываются вентили НЕ с входами cntrl1 и cntrl2 и выходами notcntrl1 и notcntrl2 соответственно. Следует помнить, что в описании портов вентиля всегда вначале идут выходы, затем входы:
<blockquote>and (w, in1, notcntrl1, notcntrl2);<br>
and (x, in2, notcntrl1, cntrl2);<br>
and (y, in3, cntrl1, notcntrl2);<br>
and (z, in4, cntrl1, cntrl2);<br><br>
or (out, w, x, y, z);</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Аналогично описываются и вентили И и ИЛИ
<blockquote>endmodule</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Конец модуля завершается ключевым словом endmodule.

<h3 align="center">Реализация мультиплексора с помощью 
логических операторов (Logic Statement Implementation)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Реализация мультиплексора с использованием логических операторов имеет следующий вид:
<blockquote>module multiplexor4_1 (out, in1, in2, in3,in4, cntrl1, cntrl2);<br>
output out;<br>
input in1, in2, in3, in4, cntrl1, cntrl2;<br><br>
assign out = (in1 & ~cntrl1 & ~cntrl2) |<br>
(in2 & ~cntrl1 & cntrl2) |<br>
(in3 & cntrl1 & ~cntrl2) |<br>
(in4 & cntrl1 & cntrl2);<br>
endmodule<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В начале следуют имя проекта и описание портов.
<blockquote>module multiplexor4_1 (out, in1, in2, in3,in4, cntrl1, cntrl2);<br>
output out;<br>
input in1, in2, in3, in4, cntrl1, cntrl2;<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Обратим внимание, что ни порты, ни их количество не изменились — стыковка с внешними модулями также останется неизменной. В какой-то мере это напоминает проект с использованием VHDL, когда для одного интерфейса можно описать несколько архитектурных тел.
<blockquote>assign out = (in1 & ~cntrl1 & ~cntrl2) |<br>
(in2 & ~cntrl1 & cntrl2) |<br>
(in3 & cntrl1 & ~cntrl2) |<br>
(in4 & cntrl1 & cntrl2);<br>
endmodule<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;С помощью конструкции assign осуществляется непрерывное назначение (continuous assignment) цепи out. В этом случае ее значение заново вычисляется каждый раз, когда меняется хотя бы один из операндов.


<h3 align="center">Реализация с помощью оператора выбора (Case Statement Implementation)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Рассмотрим использование оператора выбора (case statement) для реализации мультиплексора. Следует заметить, что этот способ наиболее прост и наименее трудоемок.
<blockquote>module multiplexor4_1 (out, in1, in2, in3, in4, cntrl1, cntrl2);<br>
output out;<br>
input in1, in2, in3, in4, cntrl1, cntrl2;<br>
reg out;<br><br>
always @(in1 or in2 or in3 or in4 or cntrl1 or cntrl2)<br>
case ({cntrl1, cntrl2})<br>
2'b00: out = in1;<br>
2'b01: out = in2;<br>
2'b10: out = in3;<br>
2'b11: out = in4;<br>
default: $display(«Please check control bits»);<br>
endcase<br>
endmodule<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Первые три строки знакомы — добавить к сказанному ранее практически нечего.
<blockquote>module multiplexor4_1 (out, in1, in2, in3, in4, cntrl1, cntrl2);<br>
output out;<br>
input in1, in2, in3, in4, cntrl1, cntrl2;<br>
reg out;</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Единственное отличие — выход out определен как регистр (register). Это сделано для того, чтобы назначать его значения явно и не управлять ими. Такое назначение сигнала называется процедурным назначением (procedural assignment). Данные типа цепь (wire) не могут быть назначены явно, они нуждаются в сигнале-драйвере. Такое назначение называется непрерывным назначением (continuous assignment).
<blockquote>always @(in1 or in2 or in3 or in4 or cntrl1 or cntrl2)</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Эта конструкция читается так же, как пишется, то есть значение вычисляется всегда при изменении хотя бы одного операнда — система постоянно их отслеживает. Несколько забегая вперед, следует отметить, что данная конструкция является синтезируемой во многих системах проектирования, в частности в Max + Plus фирмы Altera. Список переменных называется списком чувствительности (sensitivity list), поскольку данная конструкция чувствительна к их изменениям. Данный термин уже известен нам из описания языка VHDL.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Ключевое слово always @( expr or expr... );
<blockquote>case ({cntrl2, cntrl1})<br>
2'b00: out = in1;<br>
2'b01: out = in2;<br>
2'b10: out = in3;<br>
2'b11: out = in4;<br>
default: $display(«Please check control bits»);<br>
endcase<br>
endmodule<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Синтаксис оператора выбора case в Verilog сходен с синтаксисом оператора выбора в языке C. Условием является контатенация или объединение переменных cntr2 и cntr1 в двухразрядное число. Завершает оператор выбора ключевое слово endcase.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Здесь нелишне будет напомнить, что следует различать процедурное и непрерывное назначение сигналов, что и иллюстрируют вышеприведенные примеры.


<h3 align="center">Реализация с использованием условного оператора (Conditional Operator Implementation)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Ничего нового мы не увидим — отчетливо видно, что в нашем случае условный оператор проигрывает оператору case в наглядности представления (хотя для большинства систем проектирования синтезируемые реализации окажутся идентичными):
<blockquote>module multiplexor4_1 (out, in1, in2, in3, in4, cntrl1, cntrl2);<br>
output out;<br>
input in1, in2, in3, in4, cntrl1, cntrl2;<br><br>
assign out = cntrl1? (cntrl2? in4: in3): (cntrl2? in2: in1);<br><br>
endmodule</blockquote>


<h3 align="center">Тестовый модуль (The Stimulus Module)</h3>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Вообще говоря, первоначально язык Verilog задумывался как язык верификации цифровых устройств (Verify Logic). Поэтому одной из мощных возможностей языка является наличие средств для задания тестовых сигналов. Ниже приводится пример такого модуля для нашего мультиплексора 4 в 1.
<blockquote>module muxstimulus;<br>
reg IN1, IN2, IN3, IN4, CNTRL1, CNTRL2;<br>
wire OUT;<br><br>
multiplexor4_1 mux1_4(OUT, IN1, IN2, IN3, IN4, CNTRL1, CNTRL2);<br><br>
initial begin<br>
IN1 = 1; IN2 = 0; IN3 = 1; IN4 = 0;<br>
$display(«Initial arbitrary values»);<br>
#0 $display(«input1 = %b, input2 = %b, input3 = %b, input4 = %b\n»,<br>
IN1, IN2, IN3, IN4);<br><br>
{CNTRL1, CNTRL2} = 2'b00;<br>
#1 $display(«cntrl1=%b, cntrl2=%b, output is %b», CNTRL1, CNTRL2, OUT);<br><br>
{CNTRL1, CNTRL2} = 2'b01;<br>
#1 $display(«cntrl1=%b, cntrl2=%b output is %b», CNTRL1, CNTRL2, OUT);<br><br>
{CNTRL1, CNTRL2} = 2'b10;<br>
#1 $display(«cntrl1=%b, cntrl2=%b output is %b», CNTRL1, CNTRL2, OUT);<br><br>
{CNTRL1, CNTRL2} = 2'b11;<br>
#1 $display(«cntrl1=%b, cntrl2=%b output is %b», CNTRL1, CNTRL2, OUT);<br><br>
end<br><br>
endmodule</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Рассмотрим данный пример подробнее.
<blockquote>module muxstimulus;</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Поскольку наш генератор тестов является модулем верхнего уровня иерархии (top level module), то в его описании отсутствует список портов. Для задания модуля используется ключевое слово module.
<blockquote>reg IN1, IN2, IN3, IN4, CNTRL1, CNTRL2;<br>
wire OUT;</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В данном случае мы обеспечиваем подачу тестовых сигналов на входы нашего мультиплексора и снятие сигнала с его выхода. Следовательно, мы должны назначить сигналы для входов мультиплексора и сигналу, который управляется (driven) его выходом. Поэтому для входов использованы данные типа reg, а для выхода — wire.
<blockquote>multiplexor4_1 mux1_4(OUT, IN1, IN2, IN3, IN4, CNTRL1, CNTRL2);</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В этой строке происходит обращение к тестируемому модулю multiplexor4_1, в таких случаях принят следующий синтаксис:
<blockquote>&lt;module_name&gt; &lt;instance_name&gt; (port list);</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Имя экземпляра (instance name) очень похоже на понятие языка VHDL и является необходимым при обращении к определяемым пользователем модулям (user defined modules), чтобы не нарушать иерархии проекта.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Список портов (port list) устанавливает соответствие между сигналами тестового и тестируемого модулей, при этом порядок переменных в списке портов должен соответствовать порядку их объявления в тестовом модуле.
<blockquote>initial begin<br>
IN1 = 1; IN2 = 0; IN3 = 1; IN4 = 0;<br>
$display(«Initial arbitrary values»);<br>
#0 $display(«input1 = %b, input2 = %b, input3 = %b, input4 = %b\n»,<br>
IN1, IN2, IN3, IN4);<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Собственно моделирование (simulation) осуществляется конструкцией, определяемой ключевыми словами initial begin... end. Она предназначена для объединения инструкций, которые могут выполняться одновременно.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Перед инициализацией процесса моделирования сообщение об этом выводится с помощью $display. Конструкция #0 перед директивой вывода означает, что вывод на экран осуществляется после назначения сигналов на входы. Синтаксис директивы $display подобен синтаксису функции printf в языке C.
<blockquote>$display( expr1, expr2,...., exprN);</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;ExprN может быть переменной, выражением или строкой.
<blockquote>{CNTRL1, CNTRL2} = 2'b00;<br>
#1 $display(«cntrl1=%b, cntrl2=%b, output is %b», CNTRL1, CNTRL2, OUT);</blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В следующем блоке осуществляется назначение сигналов управления:
<blockquote>CNTRL1 = 0; <br>
CNTRL2 = 0;</blockquote> 
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;Оператор конкатенации (concatenation operator) { } может быть использован для группового назначения. Следует помнить, что количество разрядов в числе и переменной должно совпадать.
<blockquote>{CNTRL1, CNTRL2} = 2'b01;<br>
#1 $display(«cntrl1=%b, cntrl2=%b output is %b», CNTRL1, CNTRL2, OUT);<br><br>
{CNTRL1, CNTRL2} = 2'b10;<br>
#1 $display(«cntrl1=%b, cntrl2=%b output is %b», CNTRL1, CNTRL2, OUT);<br><br>
{CNTRL1, CNTRL2} = 2'b11;<br>
#1 $display(«cntrl1=%b, cntrl2=%b output is %b», CNTRL1, CNTRL2, OUT);<br><br>
end<br>
endmodule<br></blockquote>
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;В данном фрагменте сигналы управления изменяются, и изменение выхода отслеживается директивой $display, которая выполняется с некоторой задержкой относительно сигналов управления, что позволяет отобразить корректные значения.
<p align="justify">&nbsp;&nbsp;&nbsp;&nbsp;<i>В следующем занятии мы завершим рассмотрение языков описания аппаратуры высокого уровня.</i>	

<h4 align="left">Литература</h4>
<ol><li>Емец С. Verilog — инструмент разработки цифровых систем… — Схемотехника № 1–4, 2001.</li>
<li>IEEE Std 1364-95, Verilog LRM. 1995. The Institute of Electrical and Electronics Engineers. Available from The Institute of Electrical and Electronics Engineers, Inc., 345 East 47th Street, New York, NY 10017 USA.</li>
<li>Palnitkar, S. 1996. Verilog HDL: A Guide to Digital Design and Synthesis. Upper Saddle River, NJ: Prentice-Hall, 396 p. ISBN 
0-13-451675-3.</li>
<li>Thomas, D. E., and P. Moorby. 1991. The Verilog Hardware Description Language. 1st ed. Dordrecht, Netherlands: Kluwer, 223 p. ISBN 0-7923-9126-8, TK7885.7.T48 (1st ed.). ISBN 0-7923-9523-9 (2nd ed.).</li></ol>
<p align="right"><a href="mailto:steshenk@sm.bmstu.ru">Владимир Стешенко</a></b></p>
</td></tr></table>

                        </td>
                    </tr>
                  </table>
                  <table width="100%" border="0" cellspacing="0" cellpadding="0">
                    <tr> 
                      <td><img src="/images/spacer1.gif" width="634" height="2"></td>
                    </tr>
                    <tr> 
                      <td align="center"> 
<!--BEGIN  Compitech_bot ALL TYPES (IE)-->
<noscript><iframe src="http://a.lvt.ru/f25322x1" frameborder="0" vspace="0" hspace="0" width="468" height="60" marginwidth="0" marginheight="0" scrolling="no"><a href="http://a.lvt.ru/r25322x1x-1002361937" target="_blank"><img src="http://a.lvt.ru/b25322x1x-1002361937" border="0" width="468" height="60"></a></iframe></noscript><script language="JavaScript">var rand = Math.floor(Math.random() * 1000000000);document.write('<iframe src="http://a.lvt.ru/f25322x1_' + rand + '" frameborder="0" vspace="0" hspace="0" width="468" height="60" marginwidth="0" marginheight="0" scrolling="no">');document.write('<a href="http://a.lvt.ru/r25322x1x' + rand + '" target="_blank"><img src="http://a.lvt.ru/b25322x1x' + rand + '" border="0" width="468" height="60"></a>');document.write('</iframe>');</script>
<!--END -->
                      </td>
                    </tr>
                    <tr> 
                      <td><img src="/images/spacer1.gif" width="634" height="2"></td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
          </td>
        </tr>
        <tr> 
          <td width=768> 
            <table width="776" border="0" cellspacing="0" cellpadding="0">
              <tr> 
                <td width="140" bgcolor="#9C4B4B"> 
                  <p class="data" align="left"><a href="mailto:web@chipdoc.ru"><img src="/images/email.gif" width="9" height="9" hspace="5" border="0"></a><a href="#top"><img src="/images/top.gif" width="9" height="9" border="0"></a></p>
                </td>
                <td bgcolor="#9C4B4B" width="634"> 
                  <p class="copy" align="right">Design by <a href="http://www.centre.ru" target="_blank"><font color="#FFFFFF">CENTRE.RU<img src="/images/copy.gif" width="9" height="9" hspace="5" border="0"></a></p>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </td>
    <td width="2" bgcolor="#4C5A66"><img src="/images/spacer.gif" width="2" height="2"></td>
  </tr>
</table>
</body>
</html>

</html>

