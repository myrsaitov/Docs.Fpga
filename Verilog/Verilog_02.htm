<html lang="RU">
<head>

<link rel=stylesheet href="http://www.gaw.ru/tutor.css" type="text/css">

<title>Verilog — инструмент разработки цифровых электронных схем</title>

<meta name="description" content="Справочные данные по электронным компонентам">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta NAME="Author" CONTENT="Гаврилюк Сергей">
<meta name="Keywords" lang="RU" content="микроэлектроника, микросхема, транзистор, диод, микроконтроллер, память">
<meta html.cgi="Template  www.gaw.ru">

<meta name="description" content="Справочные данные - микросхемы и электронные компоненты">
<meta name="Keywords" lang="RU" content="микроэлектроника, микросхема, транзистор, диод, микроконтроллер, память, msp430, Atmel, Maxim, LCD, hd44780, t6963, sed1335, atmega128, avr, электронные компоненты">
<meta http-equiv="pragma" content="no-cache">
<meta name="language" content="Russian">
<meta name="charset" content="Windows-1251">
<meta name="MSSmartTagsPreventParsing" content="TRUE">
<meta name="distribution" content="Global">
<meta name="rating" content="General">
<meta name="expires" content="">
<meta name="robots" content="Index, Follow">
<meta name="revisit-after" content="2 Days">
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<link rel="shortcut icon" href="favicon.ico">
<link rel="stylesheet" href="/style.css">
</head>
<body bgcolor=#647786 text="#4C5A66" link="#4C5A66" vlink="#4C5A66" alink="#4C5A66" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">

<a name="#top">
<!--LiveInternet counter--><script language="JavaScript"><!--
document.write('<img src="http://counter.yadro.ru/hit?r'+
escape(document.referrer)+((typeof(screen)=='undefined')?'':
';s'+screen.width+'*'+screen.height+'*'+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+';u'+escape(document.URL)+
';i'+escape('Жж'+document.title.substring(0,80))+';'+Math.random()+
'" width=1 height=1 alt="">')//-->
</script><!--/LiveInternet-->

<!--bigmir)net TOP 100 Part 1-->
<script type="text/javascript" language="javascript"><!--
bmN=navigator,bmD=document,bmD.cookie='b=b',i=0,bs=[],bm={o:1,v:157406,s:157406,t:6,c:bmD.cookie?1:0,n:Math.round((Math.random()* 1000000)),w:0};
for(f=self;f!=f.parent;f=f.parent)bm.w++;
try{if(bmN.plugins&&bmN.mimeTypes.length&&(x=bmN.plugins['Shockwave Flash']))bm.m=parseInt(x.description.replace(/([a-zA-Z]|s)+/,''));
else for(f=3;f<20;f++)if(eval('new ActiveXObject("ShockwaveFlash.ShockwaveFlash.'+f+'")'))bm.m=f}catch(e){}
try{bm.y=bmN.javaEnabled()?1:0}catch(e){}
try{bmS=screen;bm.v^=bm.d=bmS.colorDepth||bmS.pixelDepth;bm.v^=bm.r=bmS.width}catch(e){}
r=bmD.referrer.slice(7);if(r&&r.split('/')[0]!=window.location.host){bm.f=escape(r);bm.v^=r.length}
bm.v^=window.location.href.length;for(x in bm)bs[i++]=x+bm[x];
bmD.write('<sc'+'ript type="text/javascript" language="javascript" src="http://c.bigmir.net/?'+bs.join('&')+'"></sc'+'ript>');
//--></script>
<!--bigmir)net TOP 100 Part 1-->

<table width="780" border="0" cellspacing="0" cellpadding="0" align="center">
  <tr> 
	<td width="2" bgcolor="#4C5A66"><img src="/images/spacer.gif" width="2" height="2"></td>
	<td width="768"> 
	  <table border=0 cellpadding=0 cellspacing=0 width="768" align="center">
		<tr> 
		  <td width=768 height=76> 
			<table width="768" border="0" cellspacing="0" cellpadding="0">
			  <tr> 
				<td width="174"><img src="/images/header1.gif" width="172" height="75"></td>
				<td width="202"><img src="/images/header2.gif" width="372" height="75"></td>
				<td width="234"><img src="/images/header3.gif" width="232" height="75"></td>
			  </tr>
			</table>
		  </td>
		</tr>
		<tr> 
		  <td width=768> 
			<table width="776" border="0" cellspacing="0" cellpadding="0">
			  <tr> 
				<td width="140" bgcolor="#9C4B4B"> 
				  <p class="data" align="left">19.10.2000</p>
				</td>
				<td bgcolor="#9C4B4B" width="634"> 
				  <div align="right"><img src="/images/online.gif" width="141" height="18"></div>
				</td>
			  </tr>
			</table>
		  </td>
		</tr>
		<tr> 
		  <td width=768> 
			<table width="768" border="0" cellspacing="0" cellpadding="0" bgcolor="#4C5A66">
			  <tr> 
				<td width="140" bgcolor="#C9CDD1" valign="top"> 
				  <table width="100%" border="0" cellspacing="5" cellpadding="0">
					<tr> 
					  <td>
<table border=0 cellspacing=0 cellpadding=0 align="center">
  <tr>
    <td>
<p><b>Разделы:</b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
</p>
<p><img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/">Главная</a></b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/html.cgi/about/index.htm">О журнале</b></a><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b>Тема номера</b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/html.cgi/arhiv/index.htm">Архив</a></b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/html.cgi/rubrikator/index.htm">Рубрикатор</a></b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><a href="http://www.compitech.ru/html.cgi/about/shop.htm"><b>Где купить</b></a>
<br><img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><a href="#" onclick="javascript: window.open('/reg.html','','toolbar=0,location=0,directories=0,menuBar=0,scrollbars=1,resizable=0,width=500,height=350,left=150,top=150');"><b>Подписка</b></a><br>
<!-- <img src="/images/vline.gif" width="130" height="4"></p> 
<p><b>Журнал<br>Схемотехника:</b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
</p>
<p><img src="/images/dot1.gif" width="9" height="9" hspace="3"><b>О журнале</b><br>
<img src="/images/vline.gif" width="130" height="4"><br>
<img src="/images/dot1.gif" width="9" height="9" hspace="3"><b><a href="/html.cgi/arhiv_s/index.htm">Архив</a></b><br> -->
<img src="/images/vline.gif" width="130" height="4"><br>
</td>
  </tr>
</table>
					  </td>
					</tr>
					<tr> 
					  <td valign="top"> <p>&nbsp;</p>
						<p> <b>  Поиск:</b><br>
						<img src="/images/vline.gif" width="130" height="4"><br><br>
							 <form method ="get" action="http://www.compitech.ru/html.cgi/look.cgi">  
							 <INPUT NAME="for" size=12>
				 <input type="Hidden" name="seck" value="html">
							 <input type="image" border="0" src="/images/ok.gif" width="19" height="11">
							 </form> 
							 <a href="http://www.compitech.ru/html.cgi/look_ext.cgi"> расширенный поиск </a>
							<img src="/images/vline.gif" width="130" height="4"> 

						  </p>
<form action="http://sub.chipdoc.ru/addsub.php" method="post" name="addsub">
<input type="hidden" name="fid" value="5">
<input type="hidden" name="list" value="11">
Подпишись на новости<br>
<strong>Редакции</strong><br><br>

<table align="center" cellspacing="0" cellpadding="0" border="0">
<tr>
	<td><p class="sub">Имя</td>
	<td><input type="text" name="uname" size=11 maxlength=50 class="win"></td>
</tr>
<tr>
	<td><p class="sub">E-mail</td>
	<td><input type="text" name="umail" size=11 maxlength=50 class="win"></td>
</tr>
<tr>
	<td colspan="2" align="center"><input type="submit" value="Подписаться" class="button">
</form>
	</td>
</table>
<br><br>
<div align="center">

<script type="text/javascript"><!--
google_ad_client = "pub-4585385300578666";
google_ad_width = 120;
google_ad_height = 90;
google_ad_format = "120x90_0ads_al_s";
//2007-03-28: links
google_ad_channel = "9895613298";
google_color_border = "FFFFFF";
google_color_bg = "CCCCCC";
google_color_link = "0000FF";
google_color_text = "000000";
google_color_url = "008000";
//-->
</script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>


<br><br>
<a href="http://www.sestudio.ru">комплексное продвижение сайтов Екатеринбург</a>
<br><br>
<a href="http://www.elitecomfort.ru/" target="_blank">аква пылесос Ребриха</a><br><br>
<noindex>
<!--LiveInternet logo--><a href="http://www.liveinternet.ru/click" target=_blank><img
src="http://counter.yadro.ru/logo?24.6" border=0
title="LiveInternet: показано число посетителей за сегодня"
width=88 height=15></a><!--/LiveInternet-->

<!--bigmir)net TOP 100 Part 2-->
<script type="text/javascript" language="javascript"><!--
function BM_Draw(oBM_STAT){
document.write('<div style="margin:0px;padding:0px;font-size:1px;width:88px;"><div style="background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b60_top.gif\') no-repeat bottom;">&nbsp;</div><div style="font:10px Tahoma;background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b60_center.gif\');"><div style="text-align:center;"><a href="http://www.bigmir.net/" target="_blank" style="color:#0000ab;text-decoration:none;">bigmir<span style="color:#ff0000;">)</span>net</a></div><div style="margin-top:3px;padding: 0px 6px 0px 6px;color:#426ed2;"><div style="float:left;">'+oBM_STAT.hosts+'</div><div style="float:right;">'+oBM_STAT.hits+'</div></div><br clear="all"/></div><div style="background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b60_bottom.gif\') no-repeat top;">&nbsp;</div></div>');
}
//--></script>
<script type="text/javascript" language="javascript" src="http://c.bigmir.net/?s157406&t0&l1&o1"></script>
<!--bigmir)net TOP 100 Part 2-->
</noindex>
</div>
					  </td>
					</tr>
				  </table>
				</td>
				<td width="2"><img src="/images/spacer1.gif" width="2" height="18"></td>
				<td bgcolor="#FFFFFF"  valign="top" width="634"> 
				  <table width="100%" border="0" cellspacing="0" cellpadding="0">
					<tr> 
					  <td><img src="/images/spacer1.gif" width="634" height="2"></td>
					</tr>
					<tr> 
					  <td align="center">
					  </td>
					</tr>
					<tr> 
					  <td><img src="/images/spacer1.gif" width="634" height="2"></td>
					</tr>
				  </table>
				  <table width="100%" border="0" cellspacing="5" cellpadding="0">
					<tr> 
					  <td>
<div align="center">
<script type="text/javascript"><!--


// Размер шрифтов
var yandex_ad_fontSize = 1;

// Настройки объявлений Директа
var yandex_direct_showType = 1;
var yandex_direct_fontColor = '000000';
var yandex_direct_BorderColor = 'FBE5C0';
var yandex_direct_BgColor = 'FFF9F0';
var yandex_direct_headerBgColor = 'FEEAC7';
var yandex_direct_titleColor = '0000CC';
var yandex_direct_siteurlColor = '006600';
var yandex_direct_linkColor = '0000CC';
function yandex_direct_print(){ }

var yandex_r = Math.round(Math.random() * 100000);
document.write('<sc'+'ript type="text/javascript" src="http://an.yandex.ru/code/11598?rnd=' + yandex_r + '&direct-style=1&direct-limit=4&market-limit=0"></'+'sc'+'ript>');


//--></script>

<!-- Вставьте эту строчку туда, где планируется показывать рекламный блок Яндекс.Директа -->
<script type="text/javascript">yandex_direct_print()</script>


</div>
 
<p align="left"><b>Сергей Емец</b></p>
<h4 align="left">(Продолжение, начало №2/2001)</h4>
<h1 class="titl">Verilog — инструмент разработки цифровых электронных схем</h1>


<h3 align="center">Операторы</h3>
<p class="pe">Синтаксис операторов в языке Verilog подобен синтаксису языка программирования С. К сожалению, отсутствуют операторы ++, -- и все операторы модификации вида (операция)=, например, *=, ^= и т. п. Но в то же время существуют логические операторы, полезные для моделирования цифровых схем: при одинаковом синтаксисе (\, ~|, ^, ~^, & ~&) данные операторы могут быть битовыми (bitwise) и работать с двумя операндами или операторами свертки (reduction) и с одним операндом. Тип выполняемой операции определяется по положению оператора в выражении. Кроме логических операций языком поддерживаются и арифметические операции, но, чтобы получить информацию о синтезируемости выражений с арифметическими операторами, следует ознакомиться с документацией на средства синтеза. Для эффективной реализации (синтеза) арифметических выражений в «железе» возможно потребуется приобретать специальные средства или библиотеки для datapath элементов.
<p class="pe">Рассмотрим применение операторов на примере.
<blockquote>module op_test;<br>
reg [3:0] D0, D1, D2, D3;<br>
reg [3:0] A, B, C, D;	//Verilog case-sensitive<br>
reg a, b, c, d;	// А и а — различные переменные<br>
initial<br>
begin<br>
 D0=4'b0;<br>
 D1=4'b1111;<br>
 D2=4'b1010;<br>
 D3=4'b01xz;<br>
 A=D1~^D2;	// bitwise операция — два операнда<br>
 a=~^D2;	// reduction операция — один операнд<br>
 B=D0^D3;<br>
 b=^D3;<br>
 C=D2&D3;<br>
 c=&D3;<br>
 D=D2|D3;<br>
 d=|D3;<br>
 $display(«A=%b a=%b B=%b b=%b C=%b c=%b D=%b d=%d», A, a, B, b, C, c, D, d);<br>
end<br>
endmodule<br></blockquote>
<p class="pe">Полученный результат будет выглядеть так:
<blockquote>Highest level modules:<br>
op_test<br>
A=1010 a=1 B=01xx b=x C=00x0 c=0 D=111x d=1</blockquote>
<p class="pe">При выполнении логических и битовых операций состояние с высоким импедансом (z) воспринимается как неопределенное (x). При моделировании комбинаторная логика обычно способствует распространению x, но если, например, на один из входов элемента И (And) подан 0, то, независимо от значения на других входах, на выходе будет 0. Это иллюстрируют полученные в примере значения С и с.
<p class="pe">В языке присутствует условный оператор ?:, который работает так же, как и в языке С. Таким образом, простейшей записью мультиплексора из 2 в 1 является:
<blockquote>assign Y=(SEL)?A:B;</blockquote>
<p class="pe">Список операторов языка Verilog:
<blockquote>{} 	concatenation<br>
+ — * / 	arithmetic<br>
% 	modulus<br>
> >= < <= 	relational<br>
! 	logical negation<br>
&& 	logical and<br>
|| 	logical or<br>
==	logical equality<br>
!= 	logical inequality<br>
===	case equality *<br>
!==	case inequality *<br>
~ 	bit-wise negation<br>
& 	bit-wise and<br>
| 	bit-wise inclusive or<br>
^ 	bit-wise exclusive or<br>
^~ or ~^ 	bit-wise equivalence<br>
& 	reduction and<br>
~& 	reduction nand<br>
| 	reduction or<br>
~| 	reduction nor<br>
^ 	reduction xor<br>
~^ or ^~ 	reduction xnor<br>
<< 	shift left<br>
>> 	shift right<br>
<<< 	arithmetic shift left<br>
>>> 	arithmetic shift right<br>
?: 	conditional</blockquote>
<p class="pe">Операторы, помеченные *, будут рассмотрены при описании поведенческих конструкций.
<p class="pe">Часть операторов повторяется. Например, << и <<< выполняют одинаковое действие, а последовательное выполнение ~ и ^ имеет такое же значение, как и ^~ или ~^.
<p class="pe">Применяться операторы могут как к цепям (wire), так и к сигналам (reg) и переменным. При этом используются различные типы присвоения. Для цепей, которые являются моделью физического соединения (провода), требуется подключение непрерывного воздействия, которое моделируется непрерывным (continuous) присвоением. Значения же регистров и переменных могут изменяться в результате процедурных действий и сохраняться между воздействиями (так же, как и переменные процедурного языка программирования). Для моделирования этого используется процедурное (procedural) присвоение. <p class="pe">Непрерывное присвоение употребляется вне процедурных блоков initial или begin и используется либо в описании цепи, либо с ключевым словом assign (существуют также процедурные непрерывные присвоения в блоках initial или always с ключевыми словами assign и deassign). Слева от оператора непрерывного присвоения (=) должен находиться объект типа цепь. При изменении значения какого-либо из объектов, входящих в выражение справа от =, данное выражение будет вычислено, и новое значение будет присвоено.
<p class="pe">Ниже приведен пример, иллюстрирующий работу непрерывного присвоения.
<blockquote>module assign_test;<br>
reg [3:0] data;<br>
wire parity, forth;<br>
wire gnd=1'b0;	//обьявление присвоение<br>
wire y=(data[0])?data[1]:gnd; 	//мультиплексор<br>
assign parity=^data;	//непрерывное присвоение<br>
assign forth=~|data[1:0];	//еще одно присвоение<br>
initial<br>
$monitor(data,, parity,, forth,, y);	//запускаем системную <br>
функцию для индикации изменений<br>
initial<br>
for (data=0; data!=15; data=data+1'd1)	//переберем варианты<br>
#1;	//задержка нужна, чтобы $monitor работал правильно<br>
endmodule</blockquote>
<p class="pe">Результат работы этого примера:
<blockquote>Highest level modules:<br>
assign_test<br>
0 0 1 0<br>
1 1 0 0<br>
2 1 0 0<br>
3 0 0 1<br>
4 1 1 0<br>
5 0 0 0<br>
6 0 0 0<br>
7 1 0 1<br>
8 1 1 0<br>
9 0 0 0<br>
10 0 0 0<br>
11 1 0 1<br>
12 0 1 0<br>
13 1 0 0<br>
14 1 0 0<br>
15 0 0 1</blockquote>
<p class="pe">Процедурные присвоения бывают двух типов: blocking (=) и nonblocking (<=). В большинстве случаев разработчики переводят эти названия на русский язык как «блочные» и «не блочные» присвоения, но по смыслу более подходящим кажутся термины «блокирующие» и «не блокирующие». Для того чтобы понять разницу между данными типами присвоения, нужно рассмотреть работу Verilog симулятора. В реальном объекте (цифровой схеме), который моделируется с помощью языка Verilog, события могут происходить одновременно: при изменении входного сигнала во всех элементах начинаются процессы, которые протекают одновременно и приводят к каким-либо изменениям выходных сигналов. Программа симулятора не может обрабатывать события одновременно и создает списки событий, которые должны выполняться последовательно. Когда все события из списка выполнены, симулятор переходит к следующему временному шагу: увеличивает значение текущего момента времени на некоторый временной интервал (второй параметр директивы `timescale) и выполняет список событий, которые должны произойти на этом шаге. Об исполнении событий в других временных шагах (механизме задержек) будет рассказано далее, а сейчас рассмотрим события, происходящие «одновременно» — в одном временном шаге.
<p class="pe">Допустим, имеется следующее описание:

<blockquote>always @ (posedge CLK) a=b;<br>
always @ (posedge CLK) b=a;</blockquote>
<p class="pe">Пусть а и b — регистры единичной длины, и к моменту положительного фронта тактового сигнала CLK а = 0, b = 1. Какое значение будут иметь эти переменные после прохождения фронта? Это не определено в языке и зависит от того, в какой последовательности операции присваивания попадут в список. То есть получается конструкция, поведение которой непредсказуемо. Это значит, что либо обе эти переменные будут равны 0, либо 1. Конкретный результат зависит от симулятора и от последовательности, в которой будут обработаны строки исходного файла. «Блокирующее», или «блочное», присвоение (=) блокирует исполнение других операций в блоке последовательных операций (до тех пор, пока не будет выполнена данная операция). Использование «блокирующего» присвоения в подобной конструкции в конкурентно исполняемых блоках нежелательно, и его следует избегать. Но в то же время, если в блоке требуется провести последовательное исполнение операторов, следует применять данный тип присвоения.
<p class="pe">Конструкция
<blockquote>always @ (posedge CLK)<br>
begin<br>
 a=0;<br>
 b=a;<br>
end</blockquote>
гарантирует, что после фронта CLK обе переменные — a и b — будут обнулены.
<p class="pe">Если же предыдущие примеры переписать с использованием «неблокирующего», или «неблочного», присвоения (<=), то поведение модели изменится:
<blockquote>always @ (posedge CLK) a<=b;<br>
always @ (posedge CLK) b<=a;</blockquote>
<p class="pe">В этом случае в список событий, исполняемых во временном шаге после изменения CLK, эти операции будут помещены параллельно, то есть переменные обменяются своими значениями. После прохождения фронта CLK переменные изменят свои значения: а = 1, b = 0. Данная конструкция будет эквивалентна следующей:
<blockquote>always @ (posedge CLK)<br>
begin<br>
 a<=b;<br>
 b<=a;<br>
end</blockquote>
и описывает два D-триггера, выход каждого подан на вход другого, а на тактовые входы подан сигнал CLK. При этом последовательность записи: a<=b; b<=a или b<=a; a<=b — не играет роли, так как моделируются одновременно происходящие события.
<p class="pe">Вторая конструкция в этом случае:

<blockquote>always @ (posedge CLK)<br>
begin<br>
 a<=0;<br>
 b<=a;<br>
end</blockquote>
описывает два D-триггера. На вход одного (а) подан 0, а выход подключен к входу другого (b). На тактовые входы подан сигнал CLK.
<p class="pe">Если дополнить первый триггер сигналом асинхронной установки, получится схема, которая реально может быть использована для синхронизации и нормирования коротких импульсов.
<blockquote>always @ (posedge CLK or posedge SET)<br>
begin<br>
 if (SET) a<=1'b1;<br>
 else<br>
 begin<br>
 a<=0;<br>
 b<=a;<br>
 end<br>
end</blockquote>
<p class="pe">Проверим работоспособность данной схемы следующим испытательным стендом (это упрощенный testbench — правильный пример создания испытательных стендов приведен в первой части статьи):
<blockquote>`timescale 1ns/10ps<br>
module test;<br>
reg CLK, SET, a, b;<br>
always<br>
#5 CLK=~CLK;	//100 МГц тактовый сигнал<br>
always @ (posedge CLK or posedge SET) 	//испытываемый блок<br>
begin<br>
if (SET) a<=1'b1;<br>
 else<br>
 begin<br>
 a<=0;<br>
 b<=a;<br>
 end<br>
end<br>
initial 	//инициализируем переменные<br>
begin<br>
 CLK=0;<br>
 SET=0;<br>
 a=0; b=0;<br>
 $monitor($time,,SET,,a,,b);<br>
end<br>
initial #100 $finish;   // через 100 нс завершить моделирование<br>
initial	//подача «асинхронного» сигнала SET<br>
begin<br>
 #57 SET=1'b1;<br>
 #1 SET=1'b0;<br>
end<br>
endmodule<br></blockquote>
<p class="pe">Результат работы этого теста:
<blockquote>Highest level modules:<br>
test<br>
0 0 0 0<br>
57 1 1 0<br>
58 0 1 0<br>
65 0 0 1<br>
75 0 0 0<br></blockquote>
показывает, что асинхронный сигнал SET, длительностью 1 нс (фронт на 57 нс после пуска), был синхронизирован по фронту CLK в регистре b — длительность 10 нс (фронт 65 нс, срез 75 нс).
<p class="pe">Для пользователей VHDL можно провести параллель между variable assignment (:= VHDL) и blocking assignment (= Verilog), signal assignment (<= VHDL) и nonblocking assignment (<= Verilog) соответственно. Но следует учесть, что в процедурных конструкциях Verilog различий между регистром и переменной не делается.
<h3 align="center">Временной и событийный контроль</h3>
<p class="pe">Так как Verilog используется для моделирования физических систем, то большое внимание уделено привязке события к определенному моменту времени. Для этого используется механизм задержек.
<p class="pe">Следует заметить, что средства синтеза (как для Verilog, так и для VHDL) игнорируют временные конструкции в исходном коде. Для правильной генерации цифровой схемы (нет листа) из библиотечных элементов в средства синтеза, наряду с описанием на языке высокого уровня вводятся файлы, содержащие описания «constrain». В этих файлах описываются временные ограничения распространения сигналов. Применяемый для этого синтаксис не стандартизован и определяется используемым средством синтеза. Профессиональная работа с HDL-языками высокого уровня подразумевает не только умение создавать грамотные поведенческие описания, но и умение правильно управлять средством синтеза с помощью «constrain».
<p class="pe">Однако для моделирования временной контроль необходим, и в примерах этой статьи неоднократно использовались выражения вида #<число>. Вместо числа может использоваться выражение, содержащее целые и/или вещественные параметры. В синтаксисе языка определено несколько форм временных задержек для описания различных технологических условий, наиболее полной из которых является так называемая mintypmax форма — #(min, typ, max), например #(2, 3, 4). Но данные конструкции используются, как правило, для моделирования на уровне вентилей (нет листа), а более эффективным методом таких описаний является SDF-аннотация с применением специальных SDF-файлов. Поэтому в статье будет использоваться упрощенная форма задания задержки с одним параметром #typ. Для анализа исходных файлов «третьей стороны» можно считать, что всегда используется типовое (среднее) значение.
<p class="pe">Рассмотрим применение задержки в непрерывном присвоении.
<blockquote>assign #10 c=a^b;</blockquote>
<p class="pe">Данная конструкция описывает элемент «исключающее или» с задержкой распространения 10 нс (вернее, 10 единиц первого параметра директивы `timescale, который по умолчанию равен 1 нс). Все задержки в непрерывных присвоениях являются инерциальными. Это означает, что если сигнал А изменит свое состояние на время, меньшее 10 нс, а затем изменит еще раз, то изменения сигнала С не произойдет. Для того чтобы произошло изменение сигнала С требуется, чтобы сигнал А был зафиксирован в новом состоянии более 10 нс. Такая модель поведения соответствует распространению задержки при прохождении через элементы электронной схемы. Другой тип задержки — транспортная задержка, которая обеспечивает точное соответствие формы задержанного сигнала и сдвиг его по шкале времени. В отличие от VHDL (в котором существуют спецификаторы типа задержки inertial и transport) Verilog не позволяет использовать оба типа задержек в одном моделировании. Для переключения типа задержки служит ключ командной строки запуска Verilog-симулятора.
<p class="pe">Рассмотрим задержки в процедурных блоках. Первая форма — простая задержка (она использовалась в примерах статьи). Она имеет вид:
<blockquote>#1 x=y;</blockquote>
<p class="pe">Такая задержка вызывает остановку последовательного блока на 1 нс (не влияет на обработку конкурентно исполняемых блоков). Она не обязательно используется с оператором присваивания, может использоваться с пустым оператором #1. То есть #1 x=y может быть записано в такой форме #1; x=y или #0.5; #0.5 x=y. Поведение этих конструкций одинаково.
<p class="pe">Также в процедурном блоке задержка может встречаться с другой стороны знака =. Это так называемая intra-assignment delay.
<blockquote>x=#1 y;</blockquote>
<p class="pe">В этом случае вначале происходит вычисление выражения, затем задержка, а затем присвоение. То есть рассматриваемый пример эквивалентен
<blockquote>tmp=y;<br>
#1;
x=tmp;</blockquote>
<p class="pe">Кроме временного контроля существует событийный контроль (который можно считать другой формой временного контроля). Признаком событийного контроля является знак @. В рассмотренных ранее примерах событийный контроль использовался в блоках always. Отличие Verilog от VHDL в данном случае состоит в том, что для описания фронтов и срезов сигналов используются не специализированные атрибуты сигнала, а специальная конструкция языка. Это создает впечатление, что разработчики языка Verilog несколько лучше представляли себе процесс разработки цифровых схем. Событийный контроль используется в процедурных блоках так же, как и временной контроль. При этом задержка исполнения происходит не на фиксированный временной интервал, а до тех пор, пока не произойдет нужное событие. 
<p class="pe">События бывают следующих типов:
<ul><li>@(name) — изменение name, при этом name может являться цепью, регистром, переменной или переменной типа event;</li>
<li>@(posedge A) или @(negedge А) — фронт или срез сигнала А, при этом А — однобитовый регистр или цепь;</li>
<li>комбинация перечисленных событий с ключевым словом «or», например @(posedge CLK or posedge SET); в этом случае следует различать «or» с одноименной логической операцией; в событийном контроле «or» означает, что ожидается любое из перечисленных событий, а не определенный результат логической операции.</li></ul>
<p class="pe">Для генерации синхронного сброса может использоваться такая конструкция:
<blockquote>nReset=0;<br>
repeat (16) @(posedge CLK);<br>
nReset=1'b1;</blockquote>
<p class="pe">Конструкция во второй строке примера обеспечивает задержку на 16 тактов, вернее, задержку на прохождение 16 фронтов сигнала CLK.				   


<p class="pe"><b>(Продолжение следует)</b>





<p align="right"><a href="mailto:yemets@javad.ru">yemets@javad.ru</a></p>
<hr>
<div align="center">
<script type="text/javascript"><!--
google_ad_client = "pub-4585385300578666";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text_image";
google_ad_channel ="2247381549";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "0000FF";
google_color_url = "008000";
google_color_text = "000000";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
						</td>
					</tr>
				  </table>
				  <table width="100%" border="0" cellspacing="4" cellpadding="0">
					<tr> 
					  <td><img src="/images/spacer1.gif" width="626" height="2"></td>
					</tr>
					<tr> 
					  <td> 
<p class="pe">Статьи по: <a href="/html.cgi/rubrikator/micros.htm">ARM PIC AVR MSP430</a>, <a href="/html.cgi/rubrikator/processor.htm">DSP</a>, <a href="/html.cgi/rubrikator/priem.htm">RF компоненты</a>, <a href="/html.cgi/rubrikator/trans.htm">Преобразование и коммутация речевых сигналов</a>, <a href="/html.cgi/rubrikator/analog.htm">Аналоговая техника, ADC, DAC</a>, <a href="/html.cgi/rubrikator/logic.htm">PLD, FPGA</a>, <a href="/html.cgi/rubrikator/force.htm">MOSFET, IGBT</a>, <a href="/html.cgi/rubrikator/discrete.htm">Дискретные полупрoводниковые приборы. Sensor</a>, <a href="/html.cgi/rubrikator/design.htm">Проектирование и технология</a>, <a href="/html.cgi/rubrikator/opto.htm">LCD, LCM, LED. Оптоэлектроника и ВОЛС</a>, <a href="/html.cgi/rubrikator/distr.htm">Дистрибуция электронных компонентов</a>, <a href="/html.cgi/rubrikator/obor.htm">Оборудование и измерительная техника</a>, <a href="/html.cgi/rubrikator/passive.htm">Пассивные элементы и коммутационные устройства</a>, <a href="/html.cgi/rubrikator/sistems.htm">Системы идентификации и защиты информации</a>, <a href="/html.cgi/rubrikator/korpus.htm">Корпуса</a>, <a href="/html.cgi/rubrikator/plati.htm">Печатные платы</a>
					  </td>
					</tr>
					<tr> 
					  <td><img src="/images/spacer1.gif" width="626" height="2"></td>
					</tr>
				  </table>
				</td>
			  </tr>
			</table>
		  </td>
		</tr>
		<tr> 
		  <td width=768> 
			<table width="776" border="0" cellspacing="0" cellpadding="0">
			  <tr> 
				<td width="140" bgcolor="#9C4B4B"> 
				  <p class="data" align="left"><a href="mailto:web@chipdoc.ru"><img src="/images/email.gif" width="9" height="9" hspace="5" border="0"></a><a href="#top"><img src="/images/top.gif" width="9" height="9" border="0"></a></p>
				</td>
				<td bgcolor="#9C4B4B" width="634"> 
				  <p class="copy" align="right">Design by <noindex><a href="http://www.gaw.ru" target="_blank"><font color="#FFFFFF">GAW.RU<img src="/images/copy.gif" width="9" height="9" hspace="5" border="0"></a></noindex></p>
				</td>
			  </tr>
			</table>
		  </td>
		</tr>
	  </table>
	</td>
	<td width="2" bgcolor="#4C5A66"><img src="/images/spacer.gif" width="2" height="2"></td>
  </tr>
</table>
</body>
</html>

</html>

